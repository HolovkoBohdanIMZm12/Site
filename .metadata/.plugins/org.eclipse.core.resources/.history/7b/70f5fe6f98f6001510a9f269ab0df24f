package com.Sck;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Arrays;
import java.util.Timer;
import java.util.TimerTask;

public class Main {

	@SuppressWarnings("static-access")
	public static void main(String[] args) 
	{		
		
		//============
		
		String arr1[];
		String arr2[][];
		String str = null;	
		
		Implementation imp = null;
		Socket socket_message;
						
		//============
		
						
		System.out.println("Welcome to simple java console interprate."
				 		 + "Select the appropriate command:\n" 
				 		 + "Press 'ping' to selest the command: ping" 
				 		 + "\nPress 'echo' to selest the command: echo" 
				 		 + "\nPress 'login' to selest the command: login: <login name>, <login password>" 
				 		 + "\nPress 'list' to selest the command: list"
						 + "\nPress 'msg' to selest the command: msg: <name of the msg>, <text of the msg>"
						 + "\nPress 'file' to selest the command: file: <username>, <filename>"
						 + "\nPress 'exit' to selest the command: exit");
		
		//============
		
		System.out.println();
		System.out.println("\nEnter the command: ");
		
		//============
		
		
		
		//=============
		
		
		try
		{		
			
			Socket socket = new Socket("lv.rst.uk.to", 151);
			socket_message = new Socket("lv.rst.uk.to", 151); 
			
			PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
			BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));   
			PrintWriter outnewMessage = new PrintWriter(socket_message.getOutputStream(),true);
			BufferedReader innewMessage = new BufferedReader(new InputStreamReader(
			socket_message.getInputStream()));
			
			InputStreamReader isr = new InputStreamReader(System.in);
			BufferedReader br = new BufferedReader (isr);
			
			Timer timeToReceiveMsg = new Timer();
			System.out.printf("Enter String%n");
			boolean isClosed = false;
			boolean isTimerStarted = false;
			
			while (!isClosed)
			{
				str = br.readLine();
				arr1 = str.split(" ");
				switch (arr1[0]) 
				{
			    	case "ping": 	imp.ping(socket);  break;
			        case "echo": 	imp.echo(socket,String.join(" ", partsout(arr1,1)));  break;
			        case "login": 	if(imp.login(socket,arr1[1],arr1[2])&& imp.login(socket_message, arr1[1], arr1[2])&& !isTimerStarted);
		            isTimerStarted = true;
		            timeToReceiveMsg.schedule(new MyTimerTask(), 0, 1000);	break;
		            
			        case "list": 	System.out.println("You entered command: List");  break;
			        case "msg": 	System.out.println("You entered command: Msg: <name of the msg: " + arr1[1] + ">; <Text of the msg: " + String.join(" ", partsout(arr1,2)) + ">");  break;
			        case "file":  	System.out.println("You entered command: File: <username: " + arr1[1] + ">; <filename: " + arr1[2] + ">");  break;
			        case "exit":  	System.exit(13);  break;
			        default: 		System.out.println("Incorrect command! Try again.");  break;
				}
			}	
			
		}
		catch(ArrayIndexOutOfBoundsException aobe)
		{
			System.out.println("ArrayIndexOutOfBoundsException!");
		}
		catch(Exception exc)
		{
			System.out.println("Exception!");
		}
		
		
	}
			
	//================
	
		static String[] partsout(String[] array, int index)
		{
			String [] result = new String[array.length-index];
			for (int i=index; i<(array.length); i++)
			{
				result[i-index] = array[i];
			}
			return result;
		}
		
		static Object deserialize(byte[] data) throws IOException, ClassNotFoundException 
		{
		    ByteArrayInputStream bin = new ByteArrayInputStream(data);
		    ObjectInputStream ois = new ObjectInputStream(bin);
		    return ois.readObject();
		}
		
		static public void receiveMsg(Socket socketnewMessage) throws IOException, ClassNotFoundException 
		{
			DataOutputStream dos = new DataOutputStream(socketnewMessage.getOutputStream());
			DataInputStream dis = new DataInputStream(socketnewMessage.getInputStream());
			
			dos.writeInt(1);
			dos.writeByte(25);
			
			byte[] array = new byte[dis.readInt()]; 
			dis.readFully(array);
			if(array.length > 1 && array[0] != 26) 
			{
				String[] obj = (String[])deserialize(array); 
				System.out.println("Incoming Message:"+Arrays.toString(obj));
			}
			else if(array[0] != 26)
				System.out.println("Error "+(array.length == 1 ? array[0] : Arrays.toString(array)));
		}
		
		public void receiveFile(Socket socketnewMessage) throws IOException, ClassNotFoundException 
		{
			DataInputStream dis = new DataInputStream(socketnewMessage.getInputStream());
			DataOutputStream dos = new DataOutputStream(socketnewMessage.getOutputStream());
			
			dos.writeInt(1);
			dos.writeByte(30);
			
			byte[] array = new byte[dis.readInt()]; 
			dis.readFully(array);
			if(array.length > 1 && array[0] != 31) 
			{
				Object[] obj = (Object[]) deserialize(array);
				Path path = Paths.get("D:\\Desktop", (String)obj[1]);
				byte[] filecontent=((byte[])obj[2]);
				Path content = Files.write(path, filecontent, StandardOpenOption.CREATE);
				System.out.println("Incoming File:"+Arrays.toString(obj));
			}
			else if(array[0] != 31)
				System.out.println("Error "+(array.length == 1 ? array[0] : Arrays.toString(array)));
			else
				System.out.println("ERROR!!");
		}
	
		public class MyTimerTask extends TimerTask
		{
			public void run()
			{
				try 
				{
					Socket socket_message = null;
					receiveMsg(socket_message);
					receiveFile(socket_message);
				} 
				catch (ClassNotFoundException e) 
				{
					System.out.println("ClassNotFoundException!");
				} 
				catch (Exception e) 
				{
					System.out.println("Exception!");
				}
			}
		}

}
